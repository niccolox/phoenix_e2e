"use strict";
/*
 * Copyright (c) Testmo GmbH (Berlin, Germany)
 * All rights reserved.
 * contact@testmo.com - www.testmo.com
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteAutomationThreadAppend = exports.RemoteAutomationRunAppendTo = exports.RemoteAutomationThreadCreate = exports.RemoteAutomationRunComplete = exports.RemoteAutomationRunCreate = exports.RemoteAutomationTest = exports.RemoteAutomationArtifact = exports.RemoteAutomationLink = exports.RemoteAutomationField = void 0;
var config_1 = require("../config");
var crypto = __importStar(require("crypto"));
var path_1 = __importDefault(require("path"));
var mime_types_1 = __importDefault(require("mime-types"));
function truncateString(s) {
    return s.substring(0, config_1.config.limits.string);
}
function truncateStrings(a) {
    return a.map(function (s) {
        return s.substring(0, config_1.config.limits.string);
    });
}
function truncateNote(s) {
    return s.substring(0, config_1.config.limits.note);
}
function truncateFieldText(s) {
    if (s.length <= config_1.config.limits.text) {
        return s;
    }
    var startEndLength = Math.floor(config_1.config.limits.text / 2) - 10;
    return s.substring(0, startEndLength) +
        '...\n\n[...]\n\n...' +
        s.substring(s.length - startEndLength);
}
function truncateFieldValue(type, s) {
    if (type == 'console' || type == 'text') {
        return truncateFieldText(s);
    }
    else if (type == 'html') {
        return s.substring(0, config_1.config.limits.text);
    }
    else {
        return s.substring(0, config_1.config.limits.string);
    }
}
var RemoteAutomationField = /** @class */ (function () {
    function RemoteAutomationField() {
        this.type = 1;
        this.name = '';
    }
    RemoteAutomationField.fromStringToType = function (type) {
        switch (type) {
            case 'string':
                return 1;
            case 'text':
                return 2;
            case 'html':
                return 3;
            case 'console':
                return 4;
            case 'url':
                return 5;
            default:
                return 1;
        }
    };
    RemoteAutomationField.fromResourceField = function (field) {
        var o = new RemoteAutomationField();
        o.type = this.fromStringToType(field.type);
        o.name = truncateString(field.name);
        if (field.value !== undefined) {
            o.value = truncateFieldValue(field.type, field.value);
        }
        return o;
    };
    RemoteAutomationField.fromResultAttachment = function (attachment) {
        var o = new RemoteAutomationField();
        o.type = this.fromStringToType('string');
        o.name = truncateString(attachment.name);
        o.value = truncateFieldValue('string', attachment.value);
        return o;
    };
    RemoteAutomationField.fromResultField = function (field) {
        var o = new RemoteAutomationField();
        o.type = this.fromStringToType(field.type);
        o.name = truncateString(field.name);
        if (Object.keys(field.meta).length > 0) {
            o.meta = {};
            for (var key in field.meta) {
                o.meta[truncateString(key)] = truncateString(field.meta[key]);
            }
        }
        if (field.value !== undefined) {
            o.value = truncateFieldValue(field.type, field.value);
        }
        if (field.isHighlight !== undefined) {
            o.is_highlight = field.isHighlight;
        }
        return o;
    };
    RemoteAutomationField.fromExecPassthroughResult = function (args, execResult) {
        var o = new RemoteAutomationField();
        o.type = this.fromStringToType('console');
        o.name = 'Output';
        var output = "Executing: ".concat(args.join(' '), "\n\n") +
            execResult.output.trim() + '\n\n' +
            "Exited after ".concat(execResult.elapsed / 1000000, " seconds with exit code ").concat(execResult.exitCode);
        o.value = truncateFieldValue('console', output);
        return o;
    };
    return RemoteAutomationField;
}());
exports.RemoteAutomationField = RemoteAutomationField;
var RemoteAutomationLink = /** @class */ (function () {
    function RemoteAutomationLink() {
        this.name = '';
        this.url = '';
    }
    RemoteAutomationLink.fromResourceLink = function (link) {
        var o = new RemoteAutomationLink();
        o.name = truncateString(link.name);
        o.url = truncateString(link.url);
        if (link.note !== undefined) {
            o.note = truncateNote(link.note);
        }
        return o;
    };
    return RemoteAutomationLink;
}());
exports.RemoteAutomationLink = RemoteAutomationLink;
var RemoteAutomationArtifact = /** @class */ (function () {
    function RemoteAutomationArtifact() {
        this.name = '';
        this.url = '';
    }
    RemoteAutomationArtifact.fromResourceArtifact = function (artifact) {
        var o = new RemoteAutomationArtifact();
        o.name = truncateString(artifact.name);
        o.url = truncateString(artifact.url);
        if (artifact.note !== undefined) {
            o.note = truncateNote(artifact.note);
        }
        if (artifact.mimeType !== undefined) {
            o.mime_type = truncateString(artifact.mimeType);
        }
        if (artifact.size !== undefined) {
            o.size = artifact.size;
        }
        return o;
    };
    RemoteAutomationArtifact.fromResultAttachment = function (attachment) {
        var o = new RemoteAutomationArtifact();
        if (!attachment.value.endsWith('/') && !attachment.value.endsWith('\\')) {
            var filename = path_1.default.basename(attachment.value);
            o.name = truncateString(filename);
            var mimeType = mime_types_1.default.lookup(filename);
            if (typeof mimeType === 'string') {
                o.mime_type = truncateString(mimeType);
            }
        }
        else {
            o.name = truncateString(attachment.name);
        }
        o.url = truncateString(attachment.value);
        return o;
    };
    return RemoteAutomationArtifact;
}());
exports.RemoteAutomationArtifact = RemoteAutomationArtifact;
var RemoteAutomationTest = /** @class */ (function () {
    function RemoteAutomationTest() {
        this.key = '';
        this.name = '';
        this.status = '';
        this.folder = config_1.config.folderFallback;
        this.artifacts = [];
        this.fields = [];
    }
    RemoteAutomationTest.fromResultTest = function (test) {
        var o = new RemoteAutomationTest();
        o.key = crypto.createHash('sha256').update(test.key).digest('hex');
        o.name = truncateString(test.name);
        o.status = truncateString(test.status);
        if (test.elapsed !== undefined) {
            o.elapsed = test.elapsed;
        }
        if (test.folder !== undefined) {
            o.folder = truncateString(test.folder);
        }
        if (test.file !== undefined) {
            o.file = truncateString(test.file);
        }
        if (test.line !== undefined) {
            o.line = test.line;
        }
        if (test.assertions !== undefined) {
            o.assertions = test.assertions;
        }
        var attachments = test.attachments.slice(0, config_1.config.limits.testArtifacts - 1);
        for (var _i = 0, attachments_1 = attachments; _i < attachments_1.length; _i++) {
            var attachment = attachments_1[_i];
            if (/^http?s:\/\//.test(attachment.value)) {
                o.artifacts.push(RemoteAutomationArtifact.fromResultAttachment(attachment));
            }
            else {
                o.fields.push(RemoteAutomationField.fromResultAttachment(attachment));
            }
        }
        var fields = test.fields.slice(0, config_1.config.limits.testFields - 1);
        for (var _a = 0, fields_1 = fields; _a < fields_1.length; _a++) {
            var field = fields_1[_a];
            o.fields.push(RemoteAutomationField.fromResultField(field));
        }
        var steps = test.steps.slice(0, config_1.config.limits.testSteps - 1);
        if (steps.length > 0) {
            var stepsHtml = '';
            for (var _b = 0, steps_1 = steps; _b < steps_1.length; _b++) {
                var step = steps_1[_b];
                if (step.status) {
                    stepsHtml +=
                        "<test-step status=\"".concat(step.status, "\">").concat(step.content, "</test-step>\n");
                }
                else {
                    stepsHtml += "<test-step>".concat(step.content, "</test-step>\n");
                }
            }
            stepsHtml = "<test-steps>".concat(stepsHtml, "</test-steps>");
            o.fields.push(RemoteAutomationField.fromResultField({
                source: 'property',
                type: 'html',
                name: 'Steps',
                value: stepsHtml,
                isHighlight: false,
                meta: {}
            }));
        }
        return o;
    };
    return RemoteAutomationTest;
}());
exports.RemoteAutomationTest = RemoteAutomationTest;
var RemoteAutomationRunCreate = /** @class */ (function () {
    function RemoteAutomationRunCreate() {
        this.name = '';
        this.source = '';
        this.fields = [];
        this.links = [];
        this.artifacts = [];
    }
    RemoteAutomationRunCreate.fromOptions = function (options, resources) {
        var o = new RemoteAutomationRunCreate();
        o.name = truncateString(options.name);
        o.source = truncateString(options.source);
        if (options.tags !== undefined) {
            o.tags = truncateStrings(options.tags);
        }
        if (options.configId !== undefined) {
            o.config_id = parseInt(options.configId, 10);
        }
        if (options.config !== undefined) {
            o.config = truncateString(options.config);
        }
        if (options.milestoneId !== undefined) {
            o.milestone_id = parseInt(options.milestoneId, 10);
        }
        if (options.milestone !== undefined) {
            o.milestone = truncateString(options.milestone);
        }
        o.fields = resources.fields.map(function (field) {
            return RemoteAutomationField.fromResourceField(field);
        });
        o.links = resources.links.map(function (link) {
            return RemoteAutomationLink.fromResourceLink(link);
        });
        o.artifacts = resources.artifacts.map(function (artifact) {
            return RemoteAutomationArtifact.fromResourceArtifact(artifact);
        });
        return o;
    };
    return RemoteAutomationRunCreate;
}());
exports.RemoteAutomationRunCreate = RemoteAutomationRunCreate;
var RemoteAutomationRunComplete = /** @class */ (function () {
    function RemoteAutomationRunComplete() {
        this.measure_elapsed = false;
    }
    RemoteAutomationRunComplete.fromOptions = function (options) {
        var o = new RemoteAutomationRunComplete();
        o.measure_elapsed = options.measureElapsed;
        return o;
    };
    return RemoteAutomationRunComplete;
}());
exports.RemoteAutomationRunComplete = RemoteAutomationRunComplete;
var RemoteAutomationThreadCreate = /** @class */ (function () {
    function RemoteAutomationThreadCreate() {
        this.fields = [];
        this.artifacts = [];
    }
    RemoteAutomationThreadCreate.fromOptions = function (options, resources) {
        var _a, _b, _c;
        var o = new RemoteAutomationThreadCreate();
        if (options.elapsedComputed !== undefined) {
            o.elapsed_computed = options.elapsedComputed;
        }
        if (options.elapsedObserved !== undefined) {
            o.elapsed_observed = options.elapsedObserved;
        }
        if (options.fields !== undefined) {
            (_a = o.fields).push.apply(_a, options.fields);
        }
        if (resources !== undefined) {
            (_b = o.fields).push.apply(_b, resources.fields.map(function (field) {
                return RemoteAutomationField.fromResourceField(field);
            }));
            (_c = o.artifacts).push.apply(_c, resources.artifacts.map(function (artifact) {
                return RemoteAutomationArtifact.fromResourceArtifact(artifact);
            }));
        }
        return o;
    };
    return RemoteAutomationThreadCreate;
}());
exports.RemoteAutomationThreadCreate = RemoteAutomationThreadCreate;
var RemoteAutomationRunAppendTo = /** @class */ (function () {
    function RemoteAutomationRunAppendTo() {
        this.fields = [];
        this.links = [];
        this.artifacts = [];
    }
    RemoteAutomationRunAppendTo.fromOptions = function (resources) {
        var o = new RemoteAutomationRunAppendTo();
        o.fields = resources.fields.map(function (field) {
            return RemoteAutomationField.fromResourceField(field);
        });
        o.links = resources.links.map(function (link) {
            return RemoteAutomationLink.fromResourceLink(link);
        });
        o.artifacts = resources.artifacts.map(function (artifact) {
            return RemoteAutomationArtifact.fromResourceArtifact(artifact);
        });
        return o;
    };
    return RemoteAutomationRunAppendTo;
}());
exports.RemoteAutomationRunAppendTo = RemoteAutomationRunAppendTo;
var RemoteAutomationThreadAppend = /** @class */ (function () {
    function RemoteAutomationThreadAppend() {
        this.tests = [];
    }
    RemoteAutomationThreadAppend.fromOptions = function (tests) {
        var o = new RemoteAutomationThreadAppend();
        o.tests = tests.map(function (test) {
            return RemoteAutomationTest.fromResultTest(test);
        });
        return o;
    };
    return RemoteAutomationThreadAppend;
}());
exports.RemoteAutomationThreadAppend = RemoteAutomationThreadAppend;
