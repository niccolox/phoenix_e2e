"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ConfigurationExpand = _interopRequireDefault(require("./ConfigurationExpand"));
var _FieldValueExpand = _interopRequireDefault(require("./FieldValueExpand"));
var _IssueExpand = _interopRequireDefault(require("./IssueExpand"));
var _MilestoneExpand = _interopRequireDefault(require("./MilestoneExpand"));
var _StateExpand = _interopRequireDefault(require("./StateExpand"));
var _StatusExpand = _interopRequireDefault(require("./StatusExpand"));
var _TemplateExpand = _interopRequireDefault(require("./TemplateExpand"));
var _UserExpand = _interopRequireDefault(require("./UserExpand"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Testmo REST API
                                                                                                                                                                                                                                                                                                                                                                                               * The Testmo REST API enables applications to interact with Testmo instances.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 2.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: contact@testmo.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The SessionExpands model module.
 * @module model/SessionExpands
 * @version 2.0.0
 */
var SessionExpands = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>SessionExpands</code>.
   * @alias module:model/SessionExpands
   */
  function SessionExpands() {
    _classCallCheck(this, SessionExpands);
    SessionExpands.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(SessionExpands, null, [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>SessionExpands</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SessionExpands} obj Optional instance to populate.
     * @return {module:model/SessionExpands} The populated <code>SessionExpands</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new SessionExpands();
        if (data.hasOwnProperty('configs')) {
          obj['configs'] = _ApiClient["default"].convertToType(data['configs'], [_ConfigurationExpand["default"]]);
        }
        if (data.hasOwnProperty('field_values')) {
          obj['field_values'] = _ApiClient["default"].convertToType(data['field_values'], [_FieldValueExpand["default"]]);
        }
        if (data.hasOwnProperty('issues')) {
          obj['issues'] = _ApiClient["default"].convertToType(data['issues'], [_IssueExpand["default"]]);
        }
        if (data.hasOwnProperty('milestones')) {
          obj['milestones'] = _ApiClient["default"].convertToType(data['milestones'], [_MilestoneExpand["default"]]);
        }
        if (data.hasOwnProperty('states')) {
          obj['states'] = _ApiClient["default"].convertToType(data['states'], [_StateExpand["default"]]);
        }
        if (data.hasOwnProperty('statuses')) {
          obj['statuses'] = _ApiClient["default"].convertToType(data['statuses'], [_StatusExpand["default"]]);
        }
        if (data.hasOwnProperty('templates')) {
          obj['templates'] = _ApiClient["default"].convertToType(data['templates'], [_TemplateExpand["default"]]);
        }
        if (data.hasOwnProperty('users')) {
          obj['users'] = _ApiClient["default"].convertToType(data['users'], [_UserExpand["default"]]);
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SessionExpands</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SessionExpands</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      if (data['configs']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['configs'])) {
          throw new Error("Expected the field `configs` to be an array in the JSON data but got " + data['configs']);
        }
        // validate the optional field `configs` (array)
        var _iterator = _createForOfIteratorHelper(data['configs']),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;
            _ConfigurationExpand["default"].validateJsonObject(item);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        ;
      }
      if (data['field_values']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['field_values'])) {
          throw new Error("Expected the field `field_values` to be an array in the JSON data but got " + data['field_values']);
        }
        // validate the optional field `field_values` (array)
        var _iterator2 = _createForOfIteratorHelper(data['field_values']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _item = _step2.value;
            _FieldValueExpand["default"].validateJsonObject(_item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      if (data['issues']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['issues'])) {
          throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
        }
        // validate the optional field `issues` (array)
        var _iterator3 = _createForOfIteratorHelper(data['issues']),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _item2 = _step3.value;
            _IssueExpand["default"].validateJsonObject(_item2);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        ;
      }
      if (data['milestones']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['milestones'])) {
          throw new Error("Expected the field `milestones` to be an array in the JSON data but got " + data['milestones']);
        }
        // validate the optional field `milestones` (array)
        var _iterator4 = _createForOfIteratorHelper(data['milestones']),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _item3 = _step4.value;
            _MilestoneExpand["default"].validateJsonObject(_item3);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        ;
      }
      if (data['states']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['states'])) {
          throw new Error("Expected the field `states` to be an array in the JSON data but got " + data['states']);
        }
        // validate the optional field `states` (array)
        var _iterator5 = _createForOfIteratorHelper(data['states']),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _item4 = _step5.value;
            _StateExpand["default"].validateJsonObject(_item4);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        ;
      }
      if (data['statuses']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['statuses'])) {
          throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
        }
        // validate the optional field `statuses` (array)
        var _iterator6 = _createForOfIteratorHelper(data['statuses']),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _item5 = _step6.value;
            _StatusExpand["default"].validateJsonObject(_item5);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        ;
      }
      if (data['templates']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['templates'])) {
          throw new Error("Expected the field `templates` to be an array in the JSON data but got " + data['templates']);
        }
        // validate the optional field `templates` (array)
        var _iterator7 = _createForOfIteratorHelper(data['templates']),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _item6 = _step7.value;
            _TemplateExpand["default"].validateJsonObject(_item6);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
        ;
      }
      if (data['users']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['users'])) {
          throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
        }
        // validate the optional field `users` (array)
        var _iterator8 = _createForOfIteratorHelper(data['users']),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _item7 = _step8.value;
            _UserExpand["default"].validateJsonObject(_item7);
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        ;
      }
      return true;
    }
  }]);
  return SessionExpands;
}();
/**
 * @member {Array.<module:model/ConfigurationExpand>} configs
 */
SessionExpands.prototype['configs'] = undefined;

/**
 * @member {Array.<module:model/FieldValueExpand>} field_values
 */
SessionExpands.prototype['field_values'] = undefined;

/**
 * @member {Array.<module:model/IssueExpand>} issues
 */
SessionExpands.prototype['issues'] = undefined;

/**
 * @member {Array.<module:model/MilestoneExpand>} milestones
 */
SessionExpands.prototype['milestones'] = undefined;

/**
 * @member {Array.<module:model/StateExpand>} states
 */
SessionExpands.prototype['states'] = undefined;

/**
 * @member {Array.<module:model/StatusExpand>} statuses
 */
SessionExpands.prototype['statuses'] = undefined;

/**
 * @member {Array.<module:model/TemplateExpand>} templates
 */
SessionExpands.prototype['templates'] = undefined;

/**
 * @member {Array.<module:model/UserExpand>} users
 */
SessionExpands.prototype['users'] = undefined;
var _default = SessionExpands;
exports["default"] = _default;