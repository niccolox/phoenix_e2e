"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateAutomationArtifact = _interopRequireDefault(require("./CreateAutomationArtifact"));
var _CreateAutomationField = _interopRequireDefault(require("./CreateAutomationField"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Testmo REST API
                                                                                                                                                                                                                                                                                                                                                                                               * The Testmo REST API enables applications to interact with Testmo instances.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 2.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: contact@testmo.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The CreateAutomationTest model module.
 * @module model/CreateAutomationTest
 * @version 2.0.0
 */
var CreateAutomationTest = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateAutomationTest</code>.
   * @alias module:model/CreateAutomationTest
   * @param key {String} Key used to identify tests across multiple automation runs (in the context of the same source). Limited to a maximum of 64 lowercase alphanumeric (a-z, 0-9) characters.
   * @param name {String} Name of the test.
   * @param status {String} Alias of the status for the result of the test (for example, `failed` or `passed`). The status aliases can be configured in Testmo's admin area.
   * @param folder {String} Fully qualified name of the target folder of the test. Folders can be used to group related tests and usually map to class or type names as defined in the test automation suite.
   */
  function CreateAutomationTest(key, name, status, folder) {
    _classCallCheck(this, CreateAutomationTest);
    CreateAutomationTest.initialize(this, key, name, status, folder);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(CreateAutomationTest, null, [{
    key: "initialize",
    value: function initialize(obj, key, name, status, folder) {
      obj['key'] = key;
      obj['name'] = name;
      obj['status'] = status;
      obj['folder'] = folder;
    }

    /**
     * Constructs a <code>CreateAutomationTest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAutomationTest} obj Optional instance to populate.
     * @return {module:model/CreateAutomationTest} The populated <code>CreateAutomationTest</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateAutomationTest();
        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }
        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }
        if (data.hasOwnProperty('status')) {
          obj['status'] = _ApiClient["default"].convertToType(data['status'], 'String');
        }
        if (data.hasOwnProperty('folder')) {
          obj['folder'] = _ApiClient["default"].convertToType(data['folder'], 'String');
        }
        if (data.hasOwnProperty('elapsed')) {
          obj['elapsed'] = _ApiClient["default"].convertToType(data['elapsed'], 'Number');
        }
        if (data.hasOwnProperty('file')) {
          obj['file'] = _ApiClient["default"].convertToType(data['file'], 'String');
        }
        if (data.hasOwnProperty('line')) {
          obj['line'] = _ApiClient["default"].convertToType(data['line'], 'Number');
        }
        if (data.hasOwnProperty('assertions')) {
          obj['assertions'] = _ApiClient["default"].convertToType(data['assertions'], 'Number');
        }
        if (data.hasOwnProperty('artifacts')) {
          obj['artifacts'] = _ApiClient["default"].convertToType(data['artifacts'], [_CreateAutomationArtifact["default"]]);
        }
        if (data.hasOwnProperty('fields')) {
          obj['fields'] = _ApiClient["default"].convertToType(data['fields'], [_CreateAutomationField["default"]]);
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAutomationTest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAutomationTest</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(CreateAutomationTest.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data[property]) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
        throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
      }
      // ensure the json data is a string
      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      }
      // ensure the json data is a string
      if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
        throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
      }
      // ensure the json data is a string
      if (data['folder'] && !(typeof data['folder'] === 'string' || data['folder'] instanceof String)) {
        throw new Error("Expected the field `folder` to be a primitive type in the JSON string but got " + data['folder']);
      }
      // ensure the json data is a string
      if (data['file'] && !(typeof data['file'] === 'string' || data['file'] instanceof String)) {
        throw new Error("Expected the field `file` to be a primitive type in the JSON string but got " + data['file']);
      }
      if (data['artifacts']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['artifacts'])) {
          throw new Error("Expected the field `artifacts` to be an array in the JSON data but got " + data['artifacts']);
        }
        // validate the optional field `artifacts` (array)
        var _iterator2 = _createForOfIteratorHelper(data['artifacts']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            _CreateAutomationArtifact["default"].validateJsonObject(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      if (data['fields']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['fields'])) {
          throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
        }
        // validate the optional field `fields` (array)
        var _iterator3 = _createForOfIteratorHelper(data['fields']),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _item = _step3.value;
            _CreateAutomationField["default"].validateJsonObject(_item);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        ;
      }
      return true;
    }
  }]);
  return CreateAutomationTest;
}();
CreateAutomationTest.RequiredProperties = ["key", "name", "status", "folder"];

/**
 * Key used to identify tests across multiple automation runs (in the context of the same source). Limited to a maximum of 64 lowercase alphanumeric (a-z, 0-9) characters.
 * @member {String} key
 */
CreateAutomationTest.prototype['key'] = undefined;

/**
 * Name of the test.
 * @member {String} name
 */
CreateAutomationTest.prototype['name'] = undefined;

/**
 * Alias of the status for the result of the test (for example, `failed` or `passed`). The status aliases can be configured in Testmo's admin area.
 * @member {String} status
 */
CreateAutomationTest.prototype['status'] = undefined;

/**
 * Fully qualified name of the target folder of the test. Folders can be used to group related tests and usually map to class or type names as defined in the test automation suite.
 * @member {String} folder
 */
CreateAutomationTest.prototype['folder'] = undefined;

/**
 * Overall execution time (observed or computed) of the test in microseconds.
 * @member {Number} elapsed
 */
CreateAutomationTest.prototype['elapsed'] = undefined;

/**
 * Name of the file (with or without full path) the test is located in.
 * @member {String} file
 */
CreateAutomationTest.prototype['file'] = undefined;

/**
 * Line number of the test in the given `file`.
 * @member {Number} line
 */
CreateAutomationTest.prototype['line'] = undefined;

/**
 * Number of assertions in the test.
 * @member {Number} assertions
 */
CreateAutomationTest.prototype['assertions'] = undefined;

/**
 * List of externally stored test artifacts to link to the test (such as log files, screenshots or test data).
 * @member {Array.<module:model/CreateAutomationArtifact>} artifacts
 */
CreateAutomationTest.prototype['artifacts'] = undefined;

/**
 * List of fields to attach to the test (such as environment variables, errors or terminal output).
 * @member {Array.<module:model/CreateAutomationField>} fields
 */
CreateAutomationTest.prototype['fields'] = undefined;
var _default = CreateAutomationTest;
exports["default"] = _default;