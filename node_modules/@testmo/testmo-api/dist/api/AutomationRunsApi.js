"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AppendToAutomationRun = _interopRequireDefault(require("../model/AppendToAutomationRun"));
var _AppendToAutomationRunThread = _interopRequireDefault(require("../model/AppendToAutomationRunThread"));
var _AutomationRunPage = _interopRequireDefault(require("../model/AutomationRunPage"));
var _AutomationRunRow = _interopRequireDefault(require("../model/AutomationRunRow"));
var _CompleteAutomationRun = _interopRequireDefault(require("../model/CompleteAutomationRun"));
var _CompleteAutomationRunThread = _interopRequireDefault(require("../model/CompleteAutomationRunThread"));
var _CreateAutomationRun = _interopRequireDefault(require("../model/CreateAutomationRun"));
var _CreateAutomationRunThread = _interopRequireDefault(require("../model/CreateAutomationRunThread"));
var _CreatedAutomationRun = _interopRequireDefault(require("../model/CreatedAutomationRun"));
var _CreatedAutomationRunThread = _interopRequireDefault(require("../model/CreatedAutomationRunThread"));
var _ErrorCollection = _interopRequireDefault(require("../model/ErrorCollection"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Testmo REST API
                                                                                                                                                                                                                                                                                                                                                                                               * The Testmo REST API enables applications to interact with Testmo instances.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 2.0.0
                                                                                                                                                                                                                                                                                                                                                                                               * Contact: contact@testmo.com
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* AutomationRuns service.
* @module api/AutomationRunsApi
* @version 2.0.0
*/
var AutomationRunsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new AutomationRunsApi. 
  * @alias module:api/AutomationRunsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function AutomationRunsApi(apiClient) {
    _classCallCheck(this, AutomationRunsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Append resources to an automation run
   * Appends test artifacts, fields or links to an existing automation run.
   * @param {Number} automationRunId ID of the automation run.
   * @param {module:model/AppendToAutomationRun} appendToAutomationRun 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  _createClass(AutomationRunsApi, [{
    key: "appendToAutomationRunWithHttpInfo",
    value: function appendToAutomationRunWithHttpInfo(automationRunId, appendToAutomationRun) {
      var postBody = appendToAutomationRun;
      // verify the required parameter 'automationRunId' is set
      if (automationRunId === undefined || automationRunId === null) {
        throw new Error("Missing the required parameter 'automationRunId' when calling appendToAutomationRun");
      }
      // verify the required parameter 'appendToAutomationRun' is set
      if (appendToAutomationRun === undefined || appendToAutomationRun === null) {
        throw new Error("Missing the required parameter 'appendToAutomationRun' when calling appendToAutomationRun");
      }
      var pathParams = {
        'automation_run_id': automationRunId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/automation/runs/{automation_run_id}/append', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Append resources to an automation run
     * Appends test artifacts, fields or links to an existing automation run.
     * @param {Number} automationRunId ID of the automation run.
     * @param {module:model/AppendToAutomationRun} appendToAutomationRun 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "appendToAutomationRun",
    value: function appendToAutomationRun(automationRunId, _appendToAutomationRun) {
      return this.appendToAutomationRunWithHttpInfo(automationRunId, _appendToAutomationRun).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Append resources and test results to a thread
     * Appends test artifacts, fields or test results to an existing thread in an automation run.
     * @param {Number} automationRunThreadId ID of the automation run thread.
     * @param {module:model/AppendToAutomationRunThread} appendToAutomationRunThread 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "appendToAutomationRunThreadWithHttpInfo",
    value: function appendToAutomationRunThreadWithHttpInfo(automationRunThreadId, appendToAutomationRunThread) {
      var postBody = appendToAutomationRunThread;
      // verify the required parameter 'automationRunThreadId' is set
      if (automationRunThreadId === undefined || automationRunThreadId === null) {
        throw new Error("Missing the required parameter 'automationRunThreadId' when calling appendToAutomationRunThread");
      }
      // verify the required parameter 'appendToAutomationRunThread' is set
      if (appendToAutomationRunThread === undefined || appendToAutomationRunThread === null) {
        throw new Error("Missing the required parameter 'appendToAutomationRunThread' when calling appendToAutomationRunThread");
      }
      var pathParams = {
        'automation_run_thread_id': automationRunThreadId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/automation/runs/threads/{automation_run_thread_id}/append', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Append resources and test results to a thread
     * Appends test artifacts, fields or test results to an existing thread in an automation run.
     * @param {Number} automationRunThreadId ID of the automation run thread.
     * @param {module:model/AppendToAutomationRunThread} appendToAutomationRunThread 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "appendToAutomationRunThread",
    value: function appendToAutomationRunThread(automationRunThreadId, _appendToAutomationRunThread) {
      return this.appendToAutomationRunThreadWithHttpInfo(automationRunThreadId, _appendToAutomationRunThread).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Complete an automation run
     * Marks an automation run and its threads as completed and closes it for new threads and test results.
     * @param {Number} automationRunId ID of the automation run to complete.
     * @param {module:model/CompleteAutomationRun} completeAutomationRun 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "completeAutomationRunWithHttpInfo",
    value: function completeAutomationRunWithHttpInfo(automationRunId, completeAutomationRun) {
      var postBody = completeAutomationRun;
      // verify the required parameter 'automationRunId' is set
      if (automationRunId === undefined || automationRunId === null) {
        throw new Error("Missing the required parameter 'automationRunId' when calling completeAutomationRun");
      }
      // verify the required parameter 'completeAutomationRun' is set
      if (completeAutomationRun === undefined || completeAutomationRun === null) {
        throw new Error("Missing the required parameter 'completeAutomationRun' when calling completeAutomationRun");
      }
      var pathParams = {
        'automation_run_id': automationRunId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/automation/runs/{automation_run_id}/complete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Complete an automation run
     * Marks an automation run and its threads as completed and closes it for new threads and test results.
     * @param {Number} automationRunId ID of the automation run to complete.
     * @param {module:model/CompleteAutomationRun} completeAutomationRun 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "completeAutomationRun",
    value: function completeAutomationRun(automationRunId, _completeAutomationRun) {
      return this.completeAutomationRunWithHttpInfo(automationRunId, _completeAutomationRun).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Complete a thread in an automation run
     * Marks an automation run thread as completed and closes it for new test results.
     * @param {Number} automationRunThreadId ID of the automation run thread to complete.
     * @param {module:model/CompleteAutomationRunThread} completeAutomationRunThread 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "completeAutomationRunThreadWithHttpInfo",
    value: function completeAutomationRunThreadWithHttpInfo(automationRunThreadId, completeAutomationRunThread) {
      var postBody = completeAutomationRunThread;
      // verify the required parameter 'automationRunThreadId' is set
      if (automationRunThreadId === undefined || automationRunThreadId === null) {
        throw new Error("Missing the required parameter 'automationRunThreadId' when calling completeAutomationRunThread");
      }
      // verify the required parameter 'completeAutomationRunThread' is set
      if (completeAutomationRunThread === undefined || completeAutomationRunThread === null) {
        throw new Error("Missing the required parameter 'completeAutomationRunThread' when calling completeAutomationRunThread");
      }
      var pathParams = {
        'automation_run_thread_id': automationRunThreadId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/automation/runs/threads/{automation_run_thread_id}/complete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Complete a thread in an automation run
     * Marks an automation run thread as completed and closes it for new test results.
     * @param {Number} automationRunThreadId ID of the automation run thread to complete.
     * @param {module:model/CompleteAutomationRunThread} completeAutomationRunThread 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "completeAutomationRunThread",
    value: function completeAutomationRunThread(automationRunThreadId, _completeAutomationRunThread) {
      return this.completeAutomationRunThreadWithHttpInfo(automationRunThreadId, _completeAutomationRunThread).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create a new automation run
     * Creates a new automation run in a target project in preparation for adding threads and test results.
     * @param {Number} projectId ID of the target project.
     * @param {module:model/CreateAutomationRun} createAutomationRun 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedAutomationRun} and HTTP response
     */
  }, {
    key: "createAutomationRunWithHttpInfo",
    value: function createAutomationRunWithHttpInfo(projectId, createAutomationRun) {
      var postBody = createAutomationRun;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createAutomationRun");
      }
      // verify the required parameter 'createAutomationRun' is set
      if (createAutomationRun === undefined || createAutomationRun === null) {
        throw new Error("Missing the required parameter 'createAutomationRun' when calling createAutomationRun");
      }
      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreatedAutomationRun["default"];
      return this.apiClient.callApi('/api/v1/projects/{project_id}/automation/runs', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create a new automation run
     * Creates a new automation run in a target project in preparation for adding threads and test results.
     * @param {Number} projectId ID of the target project.
     * @param {module:model/CreateAutomationRun} createAutomationRun 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedAutomationRun}
     */
  }, {
    key: "createAutomationRun",
    value: function createAutomationRun(projectId, _createAutomationRun) {
      return this.createAutomationRunWithHttpInfo(projectId, _createAutomationRun).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create a new automation run thread
     * Creates a new thread in an automation run in preparation for adding test results.
     * @param {Number} automationRunId ID of the target automation run.
     * @param {module:model/CreateAutomationRunThread} createAutomationRunThread 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedAutomationRunThread} and HTTP response
     */
  }, {
    key: "createAutomationRunThreadWithHttpInfo",
    value: function createAutomationRunThreadWithHttpInfo(automationRunId, createAutomationRunThread) {
      var postBody = createAutomationRunThread;
      // verify the required parameter 'automationRunId' is set
      if (automationRunId === undefined || automationRunId === null) {
        throw new Error("Missing the required parameter 'automationRunId' when calling createAutomationRunThread");
      }
      // verify the required parameter 'createAutomationRunThread' is set
      if (createAutomationRunThread === undefined || createAutomationRunThread === null) {
        throw new Error("Missing the required parameter 'createAutomationRunThread' when calling createAutomationRunThread");
      }
      var pathParams = {
        'automation_run_id': automationRunId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreatedAutomationRunThread["default"];
      return this.apiClient.callApi('/api/v1/automation/runs/{automation_run_id}/threads', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create a new automation run thread
     * Creates a new thread in an automation run in preparation for adding test results.
     * @param {Number} automationRunId ID of the target automation run.
     * @param {module:model/CreateAutomationRunThread} createAutomationRunThread 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedAutomationRunThread}
     */
  }, {
    key: "createAutomationRunThread",
    value: function createAutomationRunThread(automationRunId, _createAutomationRunThread) {
      return this.createAutomationRunThreadWithHttpInfo(automationRunId, _createAutomationRunThread).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get a single automation run
     * Returns a single automation run.
     * @param {Number} automationRunId ID of the automation run to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expands Comma-separated list of expands to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationRunRow} and HTTP response
     */
  }, {
    key: "getAutomationRunWithHttpInfo",
    value: function getAutomationRunWithHttpInfo(automationRunId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'automationRunId' is set
      if (automationRunId === undefined || automationRunId === null) {
        throw new Error("Missing the required parameter 'automationRunId' when calling getAutomationRun");
      }
      var pathParams = {
        'automation_run_id': automationRunId
      };
      var queryParams = {
        'expands': opts['expands']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AutomationRunRow["default"];
      return this.apiClient.callApi('/api/v1/automation/runs/{automation_run_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get a single automation run
     * Returns a single automation run.
     * @param {Number} automationRunId ID of the automation run to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expands Comma-separated list of expands to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationRunRow}
     */
  }, {
    key: "getAutomationRun",
    value: function getAutomationRun(automationRunId, opts) {
      return this.getAutomationRunWithHttpInfo(automationRunId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get all automation runs for a project
     * Returns a page of automation runs for a project.
     * @param {Number} projectId ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Number of page to return.
     * @param {module:model/Number} opts.perPage Maximum number of items to return per page.
     * @param {String} opts.expands Comma-separated list of expands to return.
     * @param {module:model/String} opts.sort Sort field for the list of automation runs.
     * @param {module:model/String} opts.order Sort order (ascending or descending).
     * @param {String} opts.configId Comma-separated list of configurations to filter by.
     * @param {Date} opts.createdAfter Limit result to automation runs created after (in ISO8601 format and UTC time zone).
     * @param {Date} opts.createdBefore Limit result to automation runs created before (in ISO8601 format and UTC time zone).
     * @param {String} opts.createdBy Comma-separated list of users to filter by.
     * @param {String} opts.milestoneId Comma-separated list of milestones to filter by.
     * @param {String} opts.sourceId Comma-separated list of automation sources to filter by.
     * @param {String} opts.status Comma-separated list of statuses to filter by. Use: `2` for success, `3` for failure, `4` for running.
     * @param {String} opts.tags Comma-separated list of tags to filter by.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationRunPage} and HTTP response
     */
  }, {
    key: "getAutomationRunPageWithHttpInfo",
    value: function getAutomationRunPageWithHttpInfo(projectId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getAutomationRunPage");
      }
      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'expands': opts['expands'],
        'sort': opts['sort'],
        'order': opts['order'],
        'config_id': opts['configId'],
        'created_after': opts['createdAfter'],
        'created_before': opts['createdBefore'],
        'created_by': opts['createdBy'],
        'milestone_id': opts['milestoneId'],
        'source_id': opts['sourceId'],
        'status': opts['status'],
        'tags': opts['tags']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AutomationRunPage["default"];
      return this.apiClient.callApi('/api/v1/projects/{project_id}/automation/runs', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get all automation runs for a project
     * Returns a page of automation runs for a project.
     * @param {Number} projectId ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Number of page to return.
     * @param {module:model/Number} opts.perPage Maximum number of items to return per page.
     * @param {String} opts.expands Comma-separated list of expands to return.
     * @param {module:model/String} opts.sort Sort field for the list of automation runs.
     * @param {module:model/String} opts.order Sort order (ascending or descending).
     * @param {String} opts.configId Comma-separated list of configurations to filter by.
     * @param {Date} opts.createdAfter Limit result to automation runs created after (in ISO8601 format and UTC time zone).
     * @param {Date} opts.createdBefore Limit result to automation runs created before (in ISO8601 format and UTC time zone).
     * @param {String} opts.createdBy Comma-separated list of users to filter by.
     * @param {String} opts.milestoneId Comma-separated list of milestones to filter by.
     * @param {String} opts.sourceId Comma-separated list of automation sources to filter by.
     * @param {String} opts.status Comma-separated list of statuses to filter by. Use: `2` for success, `3` for failure, `4` for running.
     * @param {String} opts.tags Comma-separated list of tags to filter by.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationRunPage}
     */
  }, {
    key: "getAutomationRunPage",
    value: function getAutomationRunPage(projectId, opts) {
      return this.getAutomationRunPageWithHttpInfo(projectId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return AutomationRunsApi;
}();
exports["default"] = AutomationRunsApi;